#!/usr/bin/env node
'use strict';

const child_process = require('child_process');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const Terser = require('terser');

const canonical = process.argv[2]; // https://scheibo.github.io/boggle/
const root = process.argv[3] || '/'; // /boggle/

const shell = cmd => child_process.execSync(cmd, {stdio: 'inherit', cwd: __dirname});
const hash = files => {
  const h = crypto.createHash('md5');
  for (const f of files) {
    h.update(fs.readFileSync(path.join(__dirname, f)));
  }
  return h.digest('hex').substr(0, 8);
}

try {
  require.resolve('./data/clean_1w.txt');
} catch (e) {
  shell('./tools/fix.js');
}

try {
  require.resolve('./data/dict.json');
  require.resolve('./data/stats.json');
} catch (e) {
  shell('./tools/dict.js');
}

shell('npx parcel build --public-url ./ index.html');

const DATA = ['/data/dict.json', '/data/stats.json'];

const dist = path.join(__dirname, 'dist');
const distdata = path.join(dist, 'data');

// Rewrite the compiled index.html to fix the sw.js location
const META = '<meta name="description" content="Boggle">';
const SCRIPT = '<script type="application/javascript"';
const index = path.join(dist, 'index.html');
let contents = fs.readFileSync(index, 'utf8');
if (canonical) contents = contents.replace(META, `${META}<link rel="canonical" href="${canonical}" />`);
contents = contents.replace(SCRIPT, `<script>"serviceWorker"in navigator&&window.addEventListener("load",function(){return navigator.serviceWorker.register("${root}sw.js",{scope: "${root}"})});</script> ${SCRIPT}`)
fs.writeFileSync(index, contents);

// All the files parcel created
const FILES = fs.readdirSync(dist).filter(f => f !== 'data');

// Mirror the data directory to dist
if (!fs.existsSync(distdata)) fs.mkdirSync(distdata);
for (const file of DATA) {
  fs.copyFileSync(path.join(__dirname, file), path.join(dist, file));
}

const NAMESPACE = 'boggle';
const {code, map} = Terser.minify(`'use strict';
const CACHE = '${NAMESPACE}:cache:${hash(FILES.map(f => path.join('/dist', f)))}';
const DATA = '${NAMESPACE}:data:${hash(DATA)}';

self.addEventListener('install', e => {
    self.skipWaiting();
    e.waitUntil(
        caches.open(CACHE).then(cache =>
            cache.addAll(${JSON.stringify(FILES)})));
});

self.addEventListener('activate', e =>
    e.waitUntil(
        caches.keys().then(keys =>
            Promise.all(keys.map(key => {
                if (key.startsWith('${NAMESPACE}') && ![CACHE, DATA].includes(key)) return caches.delete(key);
            })))));

const writeBack = (e, which) =>
    caches.open(which).then(async cache => {
        const cached = await cache.match(e.request);
        if (cached) return cached;
        const response = await fetch(e.request);
        if (response.status === 200) cache.put(e.request.url, response.clone());
        return response;
    });

self.addEventListener('fetch', e => {
    if (e.request.url.includes('/data/dict.json') ||
        e.request.url.includes('/data/stats.json')) {
      e.respondWith(writeBack(e, DATA));
    } else {
      e.respondWith(writeBack(e, CACHE));
    }
});
`, {
  sourceMap: {
    filename: 'sw.js',
    url: 'sw.js.map',
  }
});

fs.writeFileSync(path.join(dist, 'sw.js'), code);
fs.writeFileSync(path.join(dist, 'sw.js.map'), map);