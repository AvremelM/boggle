{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","src/store.ts","src/trie.ts","src/dict.ts","src/stats.ts","src/ui/global.ts","src/random.ts","src/game.ts","src/timer.ts","src/ui/score.ts","src/ui/board.ts","src/ui/define.ts","src/ui/menu.ts","src/ui/review.ts","src/ui/settings.ts","src/ui/stats.ts","src/training.ts","src/ui/training.ts","src/ui/ui.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.e393564c.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","export class Store {\n  private readonly db: Promise<IDBDatabase>;\n\n  static async setup(dbName = 'keyval', storeNames = ['keyval']) {\n    return new Promise((resolve, reject) => {\n      const openreq = indexedDB.open(dbName, 1);\n      openreq.onerror = () => reject(openreq.error);\n      openreq.onsuccess = () => resolve(openreq.result);\n      openreq.onupgradeneeded = () => {\n        for (const storeName of storeNames) {\n          openreq.result.createObjectStore(storeName);\n        }\n      };\n    });\n  }\n\n  constructor(dbName = 'keyval', readonly storeName = 'keyval') {\n    this.db = new Promise((resolve, reject) => {\n      const openreq = indexedDB.open(dbName, 1);\n      openreq.onerror = () => reject(openreq.error);\n      openreq.onsuccess = () => resolve(openreq.result);\n\n      // First time setup: create an empty object store\n      openreq.onupgradeneeded = () => {\n        openreq.result.createObjectStore(storeName);\n      };\n    });\n  }\n\n  get<T>(key: string): Promise<T> {\n    let req: IDBRequest;\n    return this.withIDBStore('readonly', store => {\n      req = store.get(key);\n    }).then(() => req.result);\n  }\n\n  set<T>(key: string, value: T): Promise<void> {\n    return this.withIDBStore('readwrite', store => {\n      store.put(value, key);\n    });\n  }\n\n  private withIDBStore(\n    type: IDBTransactionMode,\n    callback: (store: IDBObjectStore) => void\n  ): Promise<void> {\n    return this.db.then(\n      db =>\n        new Promise<void>((resolve, reject) => {\n          const transaction = db.transaction(this.storeName, type);\n          transaction.oncomplete = () => resolve();\n          transaction.onabort = transaction.onerror = () => reject(transaction.error);\n          callback(transaction.objectStore(this.storeName));\n        })\n    );\n  }\n}\n","import { Dictionary } from './dict';\n\nexport class Trie {\n  parent: Trie | null;\n  children: Trie[];\n  isWord: string | boolean;\n\n  private constructor(parent: Trie | null, value: string) {\n    this.parent = parent;\n    this.children = new Array(26);\n    this.isWord = false;\n    if (parent !== null) parent.children[value.charCodeAt(0) - 65] = this;\n  }\n\n  static create(dict: Dictionary) {\n    const root = new Trie(null, '');\n    for (const word in dict) {\n      let current = root;\n      for (let i = 0; i < word.length; i++) {\n        const letter = word[i];\n        const ord = letter.charCodeAt(0);\n        let next = current.children[ord - 65];\n        if (next === undefined) next = new Trie(current, letter);\n        current = next;\n      }\n      current.isWord = dict[word].dict || true;\n    }\n    return root;\n  }\n}\n","export interface Dictionary {\n  [word: string]: Entry;\n}\n\nexport interface Entry {\n  defn: string;\n\n  freq?: number;\n  dict?: string;\n\n  n?: number;\n  o?: number;\n  b?: number;\n}\n\nexport type Type = 'NWL' | 'ENABLE' | 'CSW';\n\n// TODO: linkify? recurse?\nexport function define(word: string, dict: Dictionary) {\n  const val = dict[word];\n  if (!val) return '';\n  const re = /[{<](.*?)?=.*?[>}]/g;\n  let def = dict[word].defn;\n  if (!def) return '';\n  const match = re.exec(def);\n  if (match) {\n    const m = dict[match[1].toUpperCase()];\n    if (!m || !m.defn) {\n      def = match[1];\n    } else {\n      def = `${match[1]} (${m.defn})`;\n    }\n  }\n  return def\n    .replace(/\\{(.*?)=.*?\\}/g, '$1')\n    .replace(/<(.*?)=.*?>/g, '$1')\n    .replace(/\\s*?\\[.*?\\]\\s*?/g, '');\n}\n\nexport function isValid(word: string, dict: Dictionary, type: Type) {\n  const val = dict[word];\n  return val && (!val.dict || val.dict.includes(type.charAt(0)));\n}\n\nexport function order(words: string[]) {\n  const ordered = [];\n\n  const anadromes = new Set();\n  for (const w of words) {\n    // prettier-ignore\n    const r = w.split('').reverse().join('');\n    if (r !== w && words.includes(r)) {\n      const key = `${[w, r].sort().join(' ')}`;\n      if (!anadromes.has(key)) {\n        anadromes.add(key);\n        ordered.push(`(${w}`, `${r})`);\n      }\n    } else {\n      ordered.push(w);\n    }\n  }\n  return ordered;\n}\n","import { Dice } from './settings';\nimport { Dictionary, Type, isValid, order } from './dict';\n\nexport interface Data {\n  New: DiceEntry;\n  Old: DiceEntry;\n  Big: DiceEntry;\n  freqs: number[];\n  total: number;\n}\n\ninterface DiceEntry {\n  NWL: TypeEntry;\n  ENABLE: TypeEntry;\n  CSW: TypeEntry;\n}\n\ninterface TypeEntry {\n  words: number[];\n  anagrams: number[];\n  total: number;\n}\n\nexport type Grade = 'A' | 'B' | 'C' | 'D' | ' ';\n\nexport class Stats {\n  private readonly dict: Dictionary;\n  private readonly percentiles: Data;\n  // NOTE: contains ALL words!\n  readonly mixed: { [anagram: string]: string[] };\n\n  constructor(percentiles: Data, dict: Dictionary) {\n    this.dict = dict;\n    this.percentiles = percentiles;\n\n    this.mixed = {};\n    for (const word in dict) {\n      const anagram = Stats.toAnagram(word);\n      this.mixed[anagram] = this.mixed[anagram] || [];\n      this.mixed[anagram].push(word);\n    }\n  }\n\n  anagrams(word: string, type: Type, min?: number) {\n    const a = Stats.toAnagram(word);\n    const group = this.mixed[a];\n\n    const result: { words: string[]; n?: number; o?: number; b?: number } = { words: [] };\n    if (!group) return result;\n\n    for (const w of group) {\n      if (min && w.length < min) continue;\n      if (isValid(w, this.dict, type)) {\n        result.words.push(w);\n        const v = this.dict[w];\n        for (const d of ['n', 'o', 'b'] as Array<'n' | 'o' | 'b'>) {\n          if (v[d]) result[d] = (result[d] || 0) + v[d]!;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  stats(word: string, dice: Dice = 'New', type: Type = 'NWL') {\n    const val = this.dict[word];\n    const a = this.anagrams(word, type);\n    if (!isValid(word, this.dict, type) || !a.words.length) {\n      return { grade: ' ' as Grade };\n    }\n\n    const pf = val.freq === undefined ? -1 : this.percentiles.freqs.findIndex(v => v <= val.freq!);\n    const f = pf === -1 ? ' ' : gradeFreq(pf);\n\n    const s = (this.percentiles[dice] as DiceEntry)[type];\n    const d = dice.charAt(0).toLowerCase() as 'n' | 'o' | 'b';\n\n    const vw = val[d] || 0;\n    const pw = s.words.findIndex((v: number) => v <= vw);\n    const rw = rank(pw);\n\n    const va = a[d] || 0;\n    const pa = s.anagrams.findIndex((v: number) => v <= va);\n    const ra = rank(pa);\n\n    const g = [' ', 'A', 'B', 'C', 'D'][Math.ceil((rw + ra) / 2)] as Grade;\n\n    const pct = (v: number) => Math.round(((100 * v) / s.total) * 1000) / 1000;\n    const result: {\n      grade: Grade;\n      freq?: number;\n      word?: { p: number; v: number };\n      anagram?: { p: number; v: number };\n    } = { grade: g < f ? f : g };\n    if (pf > -1) result.freq = pf;\n    if (pw > -1) result.word = { p: pw, v: pct(val.freq!) };\n    if (pa > -1) result.anagram = { p: pa, v: pct(va) };\n    return result;\n  }\n\n  history(games: Array<[{ [w: string]: any }, Set<string>]>, dice: Dice, type: Type) {\n    const d = dice.charAt(0).toLowerCase() as 'n' | 'o' | 'b';\n    // prettier-ignore\n    const reverse = (w: string) => w.split('').reverse().join('');\n\n    const ratio: { [k: string]: number } = {};\n    const anadromes: { [k: string]: number } = {};\n    const anagrams: { [k: string]: number } = {};\n\n    const all: { [k: string]: number } = {};\n    const either: { [k: string]: number } = {};\n    const found: { [k: string]: number } = {};\n    let n = games.length;\n    for (const [possible, played] of games) {\n      const as: { [k: string]: string[] } = {};\n      for (const w in possible) {\n        all[w] = (all[w] || 0) + 1;\n        const a = Stats.toAnagram(w);\n        as[a] = as[a] || [];\n        as[a].push(w);\n\n        if (played.has(w)) {\n          found[w] = (found[w] || 0) + 1;\n\n          const r = reverse(w);\n          if (r !== w && possible[r]) {\n            const k = [w, r].sort()[0];\n            if (!played.has(r)) {\n              either[k] = (either[k] || 0) + 1;\n              // FIXME: why does this not remove NOD/DON in Big dice?\n              anadromes[k] = (anadromes[w] || 0) + (1 / n) * this.dict[k][d]!;\n            } else if (w === k) {\n              either[k] = (either[k] || 0) + 1;\n            }\n          }\n        } else {\n          ratio[w] = (ratio[w] || 0) + (1 / n) * this.dict[w][d]!;\n        }\n      }\n\n      for (const a in as) {\n        const group = as[a];\n        if (group.length <= 1) continue;\n        const f = group.filter(w => played.has(w)).length / group.length;\n        if (!f) continue;\n        const w = group.reduce((acc, w) => acc + this.dict[w][d]!, 0) / group.length;\n        anagrams[a] = (anagrams[a] || 0) + (1 / n) * w * (1 - f);\n      }\n      n--;\n    }\n\n    const K = Math.log(games.length);\n    for (const w in all) {\n      ratio[w] += K * this.dict[w][d]! * Math.pow(1 - (found[w] || 0) / all[w], 2);\n      if (anadromes[w]) {\n        const r = reverse(w);\n        const [a, b] = (found[r] || 0) > (found[w] || 0) ? [w, r] : [r, w];\n        anadromes[w] += K * this.dict[w][d]! * 2 * Math.pow(1 - (found[a] || 0) / (all[b] || 1), 2);\n      }\n\n      const a = Stats.toAnagram(w);\n      if (anagrams[a] && all[w]) {\n        anagrams[w] += K * this.dict[w][d]! * Math.pow(1 - (found[w] || 0) / all[w], 2);\n      }\n    }\n\n    const sorted = (obj: { [k: string]: number }, limit: number) =>\n      Object.entries(obj)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, limit);\n\n    return {\n      words: sorted(ratio, 100).map(e => ({\n        w: e[0],\n        found: found[e[0]] || 0,\n        all: all[e[0]] || 0,\n      })),\n      anadromes: sorted(anadromes, 50).map(e => {\n        const k = e[0];\n        const r = reverse(k);\n        const [n, d] = (found[r] || 0) > (found[k] || 0) ? [k, r] : [r, k];\n        return { n, fn: found[n] || 0, d, fd: found[d] || 0, e: either[k] || 0 };\n      }),\n      anagrams: sorted(anagrams, 50).map(e => {\n        const group = [];\n        // FIXME: should pass in min length and 3 letter words should have B scores\n        for (const r of order(this.anagrams(e[0], type).words)) {\n          const w = r.replace(/[^A-Z]/, '');\n          group.push({ raw: r, found: found[w] || 0, all: all[w] || 0 });\n        }\n        return group;\n      }),\n    };\n  }\n\n  static toAnagram(word: string) {\n    // prettier-ignore\n    return word.split('').sort().join('');\n  }\n}\n\nfunction gradeFreq(p: number) {\n  if (p >= 99) return ' ';\n  if (p >= 20) return 'A';\n  if (p >= 10) return 'B';\n  if (p >= 5) return 'C';\n  return 'D';\n}\n\nfunction rank(p: number) {\n  if (p >= 75) return 0;\n  if (p >= 50) return 1;\n  if (p >= 25) return 2;\n  if (p >= 10) return 3;\n  return 4;\n}\n","// tslint:disable:no-var-keyword prefer-const\nimport { Store } from '../store';\nimport { Settings } from '../settings';\nimport { Trie } from '../trie';\nimport { Dictionary } from '../dict';\nimport { GameJSON } from '../game';\nimport { Stats, Data } from '../stats';\n\nconst STORE = new Store('db', 'store');\nconst DEFAULTS: Settings = { dice: 'New', min: 3, dict: 'NWL', grade: 'C', display: 'Show' };\nconst fetchJSON = (url: string) => fetch(url, { mode: 'no-cors' }).then(j => j.json());\n// TODO: TRIE, STATS, GAMES, and the TrainingPool creation\n// need to be moved to a background worker and transferred in.\nexport const global: {\n  SETTINGS: Settings;\n  STORE: Store;\n  LIMIT: number;\n  DICT: Dictionary;\n  STATS: Stats;\n  HISTORY: GameJSON[];\n  TRIE: Trie;\n  GAMES: Array<[{ [word: string]: any }, Set<string>]> | undefined;\n  SEED: number;\n  LOADED: {\n    DICT: Promise<void>;\n    TRIE: () => Promise<void>;\n    STATS: () => Promise<void>;\n    HISTORY: Promise<void>;\n    TRAINING: Promise<void>;\n  };\n} = {\n  SETTINGS: (JSON.parse(localStorage.getItem('settings')!) as Settings) || DEFAULTS,\n  STORE,\n  LIMIT: 500,\n  DICT: (undefined as unknown) as Dictionary,\n  STATS: (undefined as unknown) as Stats,\n  HISTORY: (undefined as unknown) as GameJSON[],\n  TRIE: (undefined as unknown) as Trie,\n  GAMES: undefined as Array<[{ [word: string]: any }, Set<string>]> | undefined,\n  SEED: 0,\n  LOADED: {\n    DICT: fetchJSON('data/dict.json').then(d => {\n      global.DICT = d;\n    }),\n    TRIE: async () => {\n      if (global.TRIE) return;\n      await global.LOADED.DICT;\n      global.TRIE = Trie.create(global.DICT);\n    },\n    STATS: async () => {\n      if (global.STATS) return;\n      let stats: Data;\n      await Promise.all([\n        global.LOADED.DICT,\n        fetchJSON('data/stats.json').then(s => {\n          stats = s;\n        }),\n      ]);\n      global.STATS = new Stats(stats!, global.DICT);\n    },\n    HISTORY: STORE.get('history').then(h => {\n      global.HISTORY = (h as GameJSON[]) || [];\n    }),\n    TRAINING: Store.setup('training', ['NWL', 'ENABLE', 'CSW']) as Promise<void>,\n  },\n};\n\n// @ts-ignore\nwindow.global = global;\n","export class Random {\n  /* private */ seed: number;\n\n  constructor(n = 4 /* https://xkcd.com/221/ */) {\n    // Hash: https://burtleburtle.net/bob/hash/integer.html\n    n = n ^ 61 ^ (n >>> 16);\n    n = n + (n << 3);\n    n = n ^ (n >>> 4);\n    n = Math.imul(n, 0x27d4eb2d);\n    n = n ^ (n >>> 15);\n    this.seed = n >>> 0;\n  }\n\n  // Mulberry32: https://gist.github.com/tommyettinger/46a874533244883189143505d203312c\n  next(min?: number, max?: number) {\n    if (min) min = Math.floor(min);\n    if (max) max = Math.floor(max);\n\n    let z = (this.seed += 0x6d2b79f5 | 0);\n    z = Math.imul(z ^ (z >>> 15), z | 1);\n    z = z ^ (z + Math.imul(z ^ (z >>> 7), z | 61));\n    z = (z ^ (z >>> 14)) >>> 0;\n    const n = z / 2 ** 32;\n\n    if (min === undefined) return n;\n    if (!max) return Math.floor(n * min);\n    return Math.floor(n * (max - min)) + min;\n  }\n\n  shuffle<T>(arr: T[]) {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(this.next() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  }\n\n  sample<T>(arr: T[], remove = false) {\n    if (arr.length === 0) throw new RangeError('Cannot sample an empty array');\n    const index = this.next(arr.length);\n    const val = arr[index];\n    if (remove) {\n      arr[index] = arr[arr.length - 1];\n      arr.pop();\n    }\n    if (val === undefined && !Object.prototype.hasOwnProperty.call(arr, index)) {\n      throw new RangeError(`Cannot sample a sparse array`);\n    }\n    return val;\n  }\n}\n","import { Dictionary, Type, define } from './dict';\nimport { Random } from './random';\nimport { Settings, Dice, MinLength } from './settings';\nimport { Trie } from './trie';\nimport { Stats, Grade } from './stats';\n\n// prettier-ignore\nconst NEW_DICE = [\n  'AAEEGN', 'ELRTTY', 'AOOTTW', 'ABBJOO',\n  'EHRTVW', 'CIMOTU', 'DISTTY', 'EIOSST',\n  'DELRVY', 'ACHOPS', 'HIMNQU', 'EEINSU',\n  'EEGHNW', 'AFFKPS', 'HLNNRZ', 'DEILRX',\n];\n\n// prettier-ignore\nconst OLD_DICE = [\n  'AACIOT', 'AHMORS', 'EGKLUY', 'ABILTY',\n  'ACDEMP', 'EGINTV', 'GILRUW', 'ELPSTU',\n  'DENOSW', 'ACELRS', 'ABJMOQ', 'EEFHIY',\n  'EHINPS', 'DKNOTU', 'ADENVZ', 'BIFORX',\n];\n\n// prettier-ignore\nconst BIG_DICE = [\n  'AAAFRS', 'AAEEEE', 'AAFIRS', 'ADENNN', 'AEEEEM',\n  'AEEGMU', 'AEGMNN', 'AFIRSY', 'BJKQXZ', 'CCNSTW',\n  'CEIILT', 'CEILPT', 'CEIPST', 'DDLNOR', 'DHHLOR',\n  'DHHNOT', 'DHLNOR', 'EIIITT', 'EMOTTT', 'ENSSSU',\n  'FIPRSY', 'GORRVW', 'HIPRRY', 'NOOTUW', 'OOOTTU',\n];\n\nexport const SUFFIXES = ['S', 'ER', 'ED', 'ING'];\n\nexport interface GameSettings {\n  dice: Dice;\n  dict: Type;\n  min?: MinLength;\n}\n\nexport interface GameJSON {\n  seed: string;\n  start: number;\n  expired: number | null;\n  words: { [word: string]: number };\n  goal: {\n    S: number;\n    A: number;\n    B: number;\n    C: number;\n    D: number;\n  };\n}\n\nexport class Game {\n  private readonly trie: Trie;\n  private readonly dict: Dictionary;\n  private readonly stats: Stats;\n\n  private readonly dice: string[];\n\n  readonly seed: number;\n  readonly board: string[];\n  readonly random: Random;\n  readonly settings: Omit<Settings, 'grade'>;\n  readonly size: number;\n  readonly possible: { [word: string]: Array<[number, number]> };\n  readonly id: string;\n  readonly played: { [word: string]: number };\n  readonly overtime: Set<string>;\n  readonly score: { regular: number; overtime: number };\n  readonly start: number;\n\n  expired: number | null;\n  private totals_:\n    | {\n        s: number;\n        a: number;\n        b: number;\n        c: number;\n        d: number;\n        anagrams: { [anagram: string]: string[] };\n      }\n    | undefined;\n\n  constructor(\n    trie: Trie,\n    dict: Dictionary,\n    stats: Stats,\n    random: Random,\n    settings: GameSettings = { dice: 'New', dict: 'NWL' }\n  ) {\n    this.trie = trie;\n    this.dict = dict;\n    this.stats = stats;\n\n    this.dice = settings.dice === 'Big' ? BIG_DICE : settings.dice === 'Old' ? OLD_DICE : NEW_DICE;\n    this.size = Math.sqrt(this.dice.length);\n    settings.min = (settings.min || this.size - 1) as MinLength;\n    this.settings = settings as Settings;\n\n    this.random = random;\n    this.seed = this.random.seed;\n    this.board = [];\n    for (const die of this.dice) {\n      const c = this.random.sample(die.split(''));\n      this.board.push(c === 'Q' ? 'Qu' : c);\n    }\n    this.random.shuffle(this.board);\n    this.possible = this.solve();\n\n    this.id = Game.encodeID(this.settings, this.seed);\n    this.played = {};\n    this.overtime = new Set();\n    this.score = { regular: 0, overtime: 0 };\n\n    this.start = +new Date();\n    this.expired = null; // set to timestamp!\n  }\n\n  play(word: string) {\n    if (!this.played[word] && word.length >= this.settings.min) {\n      if (this.possible[word]) {\n        this.played[word] = +new Date();\n        const score = Game.score(word);\n        if (this.expired) this.overtime.add(word);\n\n        const bucket = this.expired ? 'overtime' : 'regular';\n        this.score[bucket] += score;\n        return score;\n      } else {\n        this.played[word] = -new Date();\n        if (this.expired) this.overtime.add(word);\n      }\n    }\n    return 0;\n  }\n\n  toJSON(): GameJSON {\n    return {\n      seed: this.id,\n      start: this.start,\n      expired: this.expired,\n      words: this.played,\n      goal: {\n        S: this.totals.s,\n        A: this.totals.a,\n        B: this.totals.b,\n        C: this.totals.c,\n        D: this.totals.d,\n      },\n    };\n  }\n\n  static encodeID(s: Omit<Settings, 'grade'>, seed: number) {\n    return `${s.dice.charAt(0)}${s.min}${s.dict.charAt(0)}${seed}`;\n  }\n\n  static decodeID(id: string): [Partial<GameSettings>, number] {\n    const d = id.charAt(0);\n    const dice = d === 'N' ? 'New' : d === 'O' ? 'Old' : d === 'B' ? 'Big' : undefined;\n    const min = Number(id.charAt(1)) as MinLength;\n    const t = id.charAt(2);\n    const dict = t === 'N' ? 'NWL' : t === 'E' ? 'ENABLE' : t === 'C' ? 'CSW' : undefined;\n\n    const num = id.slice(3);\n    let seed = num.length ? Number(num) : NaN;\n    if (String(seed) !== num) seed = NaN;\n\n    return [{ dice, min, dict }, seed];\n  }\n\n  static fromJSON(json: GameJSON, trie: Trie, dict: Dictionary, stats: Stats) {\n    const [settings, seed] = Game.decodeID(json.seed);\n    const random = new Random();\n    random.seed = seed;\n    const game = new Game(trie, dict, stats, random, settings as GameSettings);\n\n    // @ts-ignore readonly\n    game.start = json.start;\n    // @ts-ignore readonly\n    game.expired = json.expired;\n    // @ts-ignore readonly\n    game.played = json.words;\n\n    const score = { regular: 0, overtime: 0 };\n    for (const w in game.played) {\n      const s = Game.score(w);\n      if (!game.expired || game.played[w] <= game.expired) {\n        score.regular += s;\n      } else {\n        score.overtime += s;\n      }\n    }\n\n    // @ts-ignore readonly\n    game.score = score;\n\n    return game;\n  }\n\n  get totals() {\n    if (this.totals_) return this.totals_;\n\n    const anagrams: { [anagram: string]: string[] } = {};\n    const grades: { [grade: string]: number } = {};\n    for (const word in this.possible) {\n      const anagram = Stats.toAnagram(word);\n      anagrams[anagram] = anagrams[anagram] || [];\n      anagrams[anagram].push(word);\n\n      const g = this.stats.stats(word, this.settings.dice, this.settings.dict).grade;\n      grades[g] = (grades[g] || 0) + Game.score(word);\n    }\n\n    const d = grades.D || 0;\n    const c = d + (grades.C || 0);\n    const b = c + (grades.B || 0);\n    const a = b + (grades.A || 0);\n    const s = a + (grades[' '] || 0);\n\n    return (this.totals_ = { s, a, b, c, d, anagrams });\n  }\n\n  progress() {\n    let total = 0;\n    let invalid = 0;\n    let valid = 0;\n    const suffixes: { [suffixed: string]: string } = {};\n    const subwords = new Set<string>();\n\n    const anagrams: { [anagram: string]: string[] } = {};\n    for (const word in this.played) {\n      total++;\n      if (this.played[word] < 0) {\n        invalid++;\n        continue;\n      }\n      valid++;\n\n      for (const suffix of SUFFIXES) {\n        let suffixed;\n        if (['ER', 'ED'].includes(suffix) && word.endsWith('E')) {\n          suffixed = `${word}${suffix.charAt(1)}`;\n        } else if (suffix === 'S' && (word.endsWith('S') || word.endsWith('X'))) {\n          suffixed = `${word}ES`;\n        } else {\n          suffixed = `${word}${suffix}`;\n        }\n        if (this.possible[suffixed] && !this.played[suffixed]) suffixes[suffixed] = word;\n      }\n\n      const anagram = Stats.toAnagram(word);\n      anagrams[anagram] = anagrams[anagram] || [];\n      anagrams[anagram].push(word);\n\n      for (const sub of subs(word, this.settings.min)) {\n        if (this.possible[sub] && !this.played[sub]) subwords.add(sub);\n      }\n    }\n\n    let missing: string[] = [];\n    for (const anagram in anagrams) {\n      missing = missing.concat(\n        this.totals.anagrams[anagram].filter(w => !anagrams[anagram].includes(w))\n      );\n    }\n\n    const words = new Set([...Object.keys(suffixes), ...subwords, ...missing]);\n    const score =\n      this.score.regular +\n      this.score.overtime +\n      Array.from(words).reduce((sum, w) => Game.score(w) + sum, 0);\n\n    return {\n      invalid,\n      valid,\n      total,\n      score,\n      suffixes,\n      subwords: subwords.size,\n      anagrams: missing.length,\n      missing: words,\n    };\n  }\n\n  state() {\n    const progress = this.progress();\n    const gr = (w: string) => this.stats.stats(w, this.settings.dice, this.settings.dict).grade;\n    // missing > grade > length > anagrams > alphabetical\n    const fn = (a: string, b: string) => {\n      const ma = progress.missing.has(a);\n      const mb = progress.missing.has(b);\n      if (ma && !mb) return -1;\n      if (mb && !ma) return 1;\n\n      const ga = gr(a);\n      const gb = gr(b);\n      if (ga > gb) return -1;\n      if (gb > ga) return 1;\n\n      if (a.length > b.length) return 1;\n      if (b.length > a.length) return -1;\n\n      return Stats.toAnagram(a).localeCompare(Stats.toAnagram(b));\n    };\n\n    const augment = (w: string) => ({\n      word: w,\n      grade: gr(w),\n      defn: define(w, this.dict),\n    });\n\n    return {\n      played: Array.from(Object.entries(this.played))\n        .sort((a, b) => Math.abs(a[1]) - Math.abs(b[1]))\n        .map(e => {\n          const w = e[0];\n          const v: {\n            word: string;\n            grade: Grade;\n            defn: string;\n            invalid?: boolean;\n            overtime?: boolean;\n          } = augment(w);\n          if (e[1] < 0) v.invalid = true;\n          if (this.overtime.has(w)) v.overtime = true;\n          return v;\n        }),\n      remaining: Object.keys(this.possible)\n        .filter(w => !this.played[w])\n        .sort(fn)\n        .map(w => {\n          const v: {\n            word: string;\n            grade: Grade;\n            defn: string;\n            missing?: boolean;\n            root?: string;\n          } = augment(w);\n          if (progress.missing.has(w)) v.missing = true;\n          if (progress.suffixes[w]) v.root = progress.suffixes[w];\n          return v;\n        }),\n      progress,\n      totals: this.totals,\n    };\n  }\n\n  solve() {\n    const words: { [word: string]: Array<[number, number]> } = {};\n    const queue: Array<[number, number, string, Trie, Array<[number, number]>]> = [];\n    for (let y = 0; y < this.size; y++) {\n      for (let x = 0; x < this.size; x++) {\n        let c = this.board[this.size * y + x];\n        const ord = c.charCodeAt(0);\n        let node = this.trie.children[ord - 65];\n        if (c === 'Qu' && node !== undefined) {\n          c = 'QU';\n          node = node.children[20]; // ('U' = 85) - 65\n        }\n        if (node !== undefined) {\n          queue.push([x, y, c, node, [[x, y]]]);\n        }\n      }\n    }\n    while (queue.length !== 0) {\n      const [x, y, s, node, h] = queue.pop()!;\n      // prettier-ignore\n      for (const [dx, dy] of [[1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1]]) {\n        const [x2, y2] = [x + dx, y + dy];\n        if (h.find(e => e[0] === x2 && e[1] === y2) !== undefined) continue;\n        if (0 <= x2 && x2 < this.size && 0 <= y2 && y2 < this.size) {\n          const hist = h.slice();\n          hist.push([x2, y2]);\n\n          let c = this.board[this.size * y2 + x2];\n          let node2 = node.children[c.charCodeAt(0) - 65];\n          if (c === 'Qu' && node2 !== undefined) {\n            c = 'QU';\n            node2 = node2.children[20]; // ('U' = 85) - 65\n          }\n          if (node2 !== undefined) {\n            const s2 = s + c;\n            const isWord = typeof node2.isWord === 'boolean' ?\n              node2.isWord : node2.isWord.includes(this.settings.dict.charAt(0));\n            if (isWord && s2.length >= this.settings.min) words[s2] = hist;\n            queue.push([x2, y2, s2, node2, hist]);\n          }\n        }\n      }\n    }\n    return words;\n  }\n\n  static score(word: string) {\n    if (word.length < 3) return 0;\n    if (word.length <= 4) return 1;\n    if (word.length === 5) return 2;\n    if (word.length === 6) return 3;\n    if (word.length === 7) return 5;\n    /* if (word.length >= 8) */ return 11;\n  }\n}\n\nfunction subs(word: string, min: number) {\n  const words = new Set<string>();\n\n  for (let b = 0; b < word.length; b++) {\n    for (let e = 1; e <= word.length - b; e++) {\n      const s = word.substr(b, e);\n      if (s.length >= min) words.add(s);\n    }\n  }\n\n  return words;\n}\n","export interface TimerJSON {\n  duration: number;\n  elapsed: number;\n}\n\nexport class Timer {\n  private readonly display: HTMLElement;\n  private readonly duration: number;\n\n  private elapsed: number;\n  private interval: number | null;\n  private begin: number | undefined;\n  private last: number | undefined;\n  private expireFn: (() => void) | null;\n  private updateFn: (() => void) | null;\n\n  constructor(\n    display: HTMLElement,\n    duration: number,\n    elapsed = 0,\n    expireFn: (() => void) | null = null,\n    updateFn: (() => void) | null = null\n  ) {\n    this.duration = duration;\n    this.display = display;\n\n    this.elapsed = elapsed;\n    this.interval = null;\n    this.expireFn = expireFn;\n    this.updateFn = updateFn;\n\n    const remaining = this.duration - this.elapsed;\n    if (remaining < 0) {\n      this.display.classList.add('expired');\n    } else {\n      this.display.classList.remove('expired');\n    }\n\n    this.render(remaining);\n  }\n\n  toJSON(): TimerJSON {\n    return { duration: this.duration, elapsed: this.elapsed };\n  }\n\n  start() {\n    if (this.interval) return;\n    this.begin = new Date().getTime();\n    this.last = this.begin;\n    this.interval = setInterval(() => this.update(), 100);\n  }\n\n  stop() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  pause() {\n    if (this.interval) {\n      this.stop();\n      this.begin = new Date().getTime();\n      this.elapsed += this.begin - this.last!;\n      this.last = this.begin;\n    } else {\n      this.start();\n    }\n  }\n\n  expired() {\n    return this.elapsed >= this.duration;\n  }\n\n  update() {\n    const now = new Date().getTime();\n    this.elapsed += now - this.last!;\n    this.last = now;\n\n    let distance;\n    if (this.expired()) {\n      this.display.classList.add('expired');\n      distance = this.elapsed - this.duration;\n      if (this.expireFn) {\n        this.expireFn();\n        this.expireFn = null;\n      }\n    } else {\n      distance = this.duration - this.elapsed;\n    }\n\n    const before = this.display.textContent;\n    this.render(distance);\n    if (before !== this.display.textContent && this.updateFn) {\n      this.updateFn();\n    }\n  }\n\n  private render(distance: number) {\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = `${Math.floor((distance % (1000 * 60)) / 1000)}`.padStart(2, '0');\n    this.display.textContent = `${minutes}:${seconds}`;\n  }\n}\n","import { global } from './global';\nimport { UI } from './ui';\nimport { BoardView } from './board';\nimport { Game } from '../game';\n\nexport class ScorePane {\n  readonly board: BoardView;\n\n  container!: HTMLElement;\n\n  constructor(board: BoardView) {\n    this.board = board;\n  }\n\n  attach() {\n    this.container = UI.createElementWithId('div', 'game');\n\n    const wrapper = UI.createElementWithId('div', 'wrapper');\n    wrapper.classList.add('score');\n\n    const back = UI.createBackButton(async () => {\n      UI.root.removeChild(this.detach());\n      UI.root.appendChild(await this.board.attach({ resume: 'return' }));\n    });\n\n    this.container.appendChild(\n      UI.createTopbar(\n        back,\n        this.board.timerDisplay,\n        this.board.score!.cloneNode(true) as HTMLElement\n      )\n    );\n\n    const game = this.board.game as Game;\n    const state = game.state();\n    const score = game.score.regular + game.score.overtime;\n    const goal = state.totals[global.SETTINGS.grade.toLowerCase() as 'a' | 'b' | 'c' | 'd'];\n    const details = `${score}/${goal} (${Math.round((score / goal) * 100).toFixed(0)}%)`;\n    const current = makeCollapsible(game.id, details, 'block');\n    const div = document.createElement('div');\n    div.classList.add('collapsible-content');\n    this.displayPlayed(state, div, true);\n    this.displayPossible(state, div);\n    wrapper.appendChild(current);\n    wrapper.appendChild(div);\n    // Start off with played expanded\n    current.classList.add('active');\n    div.style.display = 'block';\n\n    for (let i = global.HISTORY.length - 1; i >= 0; i--) {\n      const state = global.HISTORY[i];\n      let score = 0;\n      for (const [w, t] of Object.entries(state.words)) {\n        if (t > 0) score += Game.score(w);\n      }\n      if (!score) continue;\n\n      const details = `${score}/${state.goal[global.SETTINGS.grade]} (${Math.round(\n        (score / state.goal[global.SETTINGS.grade]) * 100\n      ).toFixed(0)}%)`;\n      const div = document.createElement('div');\n      div.classList.add('collapsible-content');\n      div.classList.add('lazy');\n      const button = makeCollapsible(state.seed, details, 'block', () => {\n        if (div.classList.contains('lazy')) {\n          div.classList.remove('lazy');\n          const game = Game.fromJSON(state, global.TRIE, global.DICT, global.STATS);\n          const s = game.state();\n          this.displayPlayed(s, div);\n          this.displayPossible(s, div);\n        }\n      });\n      wrapper.appendChild(button);\n      wrapper.appendChild(div);\n    }\n\n    this.container.appendChild(wrapper);\n\n    return this.container;\n  }\n\n  detach() {\n    return this.container;\n  }\n\n  displayPlayed(state: ReturnType<Game['state']>, div: HTMLElement, expanded = false) {\n    const p = state.progress;\n    const details = `(${p.score}) ${Object.keys(p.suffixes).length}/${p.subwords}/${p.anagrams} (${\n      p.invalid\n    }/${p.total})`;\n\n    const button = makeCollapsible('PLAYED', details, 'table');\n\n    const table = document.createElement('table');\n    table.classList.add('collapsible-content');\n    table.classList.add('results');\n    table.classList.add('played');\n\n    for (const { word, grade, overtime, defn, invalid } of state.played) {\n      const tr = document.createElement('tr');\n      if (grade < global.SETTINGS.grade) tr.classList.add('hard');\n      if (invalid) tr.classList.add('error');\n      if (overtime) tr.classList.add('overtime');\n\n      let td = document.createElement('td');\n      const b = document.createElement('b');\n      b.textContent = word;\n      td.appendChild(b);\n      tr.appendChild(td);\n\n      td = document.createElement('td');\n      if (defn) td.textContent = defn;\n      tr.appendChild(td);\n\n      table.appendChild(tr);\n    }\n\n    if (expanded) {\n      button.classList.add('active');\n      table.style.display = 'table';\n    }\n\n    div.appendChild(button);\n    div.appendChild(table);\n  }\n\n  displayPossible(state: ReturnType<Game['state']>, div: HTMLElement, expanded = false) {\n    const tot = state.totals;\n    const details = `${tot.d}/${tot.c}/${tot.b}/${tot.a} (${tot.s})`;\n\n    const button = makeCollapsible('POSSIBLE', details, 'table');\n    const table = document.createElement('table');\n    table.classList.add('collapsible-content');\n    table.classList.add('results');\n    table.classList.add('possible');\n\n    for (const { word, grade, root, missing, defn } of state.remaining) {\n      const tr = document.createElement('tr');\n      if (grade < global.SETTINGS.grade) tr.classList.add('hard');\n\n      let td = document.createElement('td');\n      const b = document.createElement('b');\n      if (root) {\n        const rootSpan = document.createElement('span');\n        rootSpan.textContent = root;\n        const suffixSpan = document.createElement('span');\n        suffixSpan.classList.add('underline');\n        suffixSpan.textContent = word.slice(root.length);\n        b.appendChild(rootSpan);\n        b.appendChild(suffixSpan);\n      } else {\n        if (missing) b.classList.add('underline');\n        b.textContent = word;\n      }\n      td.appendChild(b);\n      tr.appendChild(td);\n\n      td = document.createElement('td');\n      td.textContent = defn;\n      tr.appendChild(td);\n\n      table.appendChild(tr);\n    }\n\n    if (expanded) {\n      button.classList.add('active');\n      table.style.display = 'table';\n    }\n\n    div.appendChild(button);\n    div.appendChild(table);\n  }\n}\n\nfunction makeCollapsible(title: string, details: string, display: string, fn?: () => void) {\n  const button = document.createElement('button');\n  button.setAttribute('type', 'button');\n  button.classList.add('collapsible');\n\n  const div = document.createElement('div');\n\n  const titleSpan = document.createElement('span');\n  titleSpan.classList.add('collapsible-title');\n  titleSpan.textContent = title;\n\n  const detailsSpan = document.createElement('span');\n  detailsSpan.classList.add('collapsible-details');\n  detailsSpan.textContent = details;\n\n  div.appendChild(titleSpan);\n  div.appendChild(detailsSpan);\n  button.appendChild(div);\n\n  button.addEventListener('click', () => {\n    button.classList.toggle('active');\n    const content = button.nextElementSibling as HTMLElement;\n    if (content.style.display === display) {\n      content.style.display = 'none';\n    } else {\n      if (fn) fn();\n      content.style.display = display;\n    }\n  });\n\n  return button;\n}\n","import { global } from './global';\nimport { UI, View } from './ui';\nimport { Game, GameJSON, SUFFIXES } from '../game';\nimport { Timer, TimerJSON } from '../timer';\nimport { Random } from '../random';\nimport { ScorePane } from './score';\nimport { define } from '../dict';\n\nconst DURATION = 180 * 1000;\n\ninterface BoardJSON {\n  last: string;\n  kept: boolean;\n  timer: TimerJSON;\n  game?: GameJSON;\n}\n\nexport class BoardView implements View {\n  last: string;\n  kept: boolean;\n  timer: Timer;\n  game: GameJSON | Game | undefined;\n\n  played!: Set<string>;\n\n  timerDisplay: HTMLElement;\n  container!: HTMLElement;\n  score!: HTMLElement;\n  full!: HTMLElement;\n  word!: HTMLElement;\n  defn!: HTMLElement;\n  tds!: Set<HTMLTableCellElement>;\n\n  constructor(json?: BoardJSON) {\n    this.last = json ? json.last : '';\n    this.kept = json ? json.kept : false;\n    this.game = json ? json.game : undefined;\n    const { display, timer } = json\n      ? this.createTimer(json.timer.duration, json.timer.elapsed)\n      : this.createTimer();\n    this.timer = timer;\n    this.timerDisplay = display;\n  }\n\n  toJSON(): BoardJSON {\n    return {\n      last: this.last,\n      kept: this.kept,\n      timer: this.timer.toJSON(),\n      game: this.game && ('random' in this.game ? this.game.toJSON() : this.game),\n    };\n  }\n\n  async attach(data: { resume?: true | 'return'; allowDupes?: boolean } = {}) {\n    await Promise.all([\n      global.LOADED.DICT,\n      global.LOADED.TRIE(),\n      global.LOADED.STATS(),\n      global.LOADED.HISTORY,\n    ]);\n\n    if (!this.played) {\n      this.played = new Set();\n      for (const h of global.HISTORY) this.played.add(h.seed);\n    }\n\n    if (!this.game || !data.resume) {\n      if (this.game) {\n        this.timer.stop();\n        if (!('random' in this.game)) {\n          this.game = Game.fromJSON(this.game, global.TRIE, global.DICT, global.STATS);\n        }\n        this.played.add(this.game.id);\n        if (Object.values(this.game.played).filter(t => t > 0).length) {\n          this.updateGames();\n          global.HISTORY.push(this.game.toJSON());\n          await global.STORE.set('history', global.HISTORY);\n        }\n      }\n\n      let game;\n      const random = new Random();\n      while (!game || !Object.keys(game.possible).length) {\n        random.seed = global.SEED;\n        const id = Game.encodeID(global.SETTINGS, random.seed);\n        if (this.played.has(id) && !data.allowDupes) {\n          global.SEED++;\n          continue;\n        }\n        game = new Game(global.TRIE, global.DICT, global.STATS, random, global.SETTINGS);\n      }\n      this.game = game;\n\n      const { display, timer } = this.createTimer();\n      this.timer = timer;\n      this.timerDisplay = display;\n\n      this.last = '';\n      this.kept = false;\n    } else if (!('random' in this.game)) {\n      this.game = Game.fromJSON(this.game, global.TRIE, global.DICT, global.STATS);\n    }\n\n    this.container = UI.createElementWithId('div', 'game');\n\n    const back = UI.createBackButton(() => UI.toggleView('Menu'));\n    back.addEventListener('long-press', () => this.refresh());\n\n    this.score = UI.createElementWithId('div', 'score');\n    this.score.addEventListener('mouseup', () => {\n      const pane = new ScorePane(this);\n      UI.root.removeChild(this.detach('Score'));\n      UI.root.appendChild(pane.attach());\n    });\n    this.score.addEventListener('long-press', () => this.onLongPress());\n    this.score.addEventListener('long-press-up', () => this.onLongPressUp());\n    this.displayScore();\n\n    this.container.appendChild(UI.createTopbar(back, this.timerDisplay, this.score));\n\n    this.full = UI.createElementWithId('div', 'full');\n    this.container.appendChild(this.full);\n\n    this.container.appendChild(this.renderBoard());\n\n    this.word = UI.createElementWithId('div', 'word');\n    this.word.classList.add('word');\n    const touch =\n      'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n    if (!touch) this.word.contentEditable = 'true';\n    this.container.appendChild(this.word);\n    this.defn = UI.createElementWithId('div', 'defn');\n    this.defn.classList.add('definition');\n    this.container.appendChild(this.defn);\n\n    if (data.resume !== 'return') this.timer.start();\n    const hash = `#${this.game.id}`;\n    if (document.location.hash !== hash) {\n      window.history.replaceState(null, '', hash);\n    }\n\n    return this.container;\n  }\n\n  renderBoard() {\n    const game = this.game as Game;\n    const content = UI.createElementWithId('div', 'foo');\n    const table = UI.createElementWithId('table', 'board');\n    if (game.size > 4) table.classList.add('big');\n\n    this.tds = new Set();\n    const random = new Random(game.seed);\n    for (let row = 0; row < game.size; row++) {\n      const tr = document.createElement('tr');\n      for (let col = 0; col < game.size; col++) {\n        const td = document.createElement('td');\n        td.textContent = game.board[row * game.size + col];\n        if (td.textContent === 'Qu') td.classList.add('qu');\n        if (['M', 'W', 'Z'].includes(td.textContent)) td.classList.add('underline');\n        td.classList.add(`rotate${90 * random.next(0, 4)}`);\n        td.setAttribute('data-x', String(row));\n        td.setAttribute('data-y', String(col));\n\n        const div = document.createElement('div');\n        div.classList.add('target');\n        div.setAttribute('data-x', String(row));\n        div.setAttribute('data-y', String(col));\n\n        td.appendChild(div);\n        tr.appendChild(td);\n        this.tds.add(td);\n      }\n      table.appendChild(tr);\n    }\n\n    let touched: Set<HTMLTableCellElement>;\n    const deselect = () => {\n      if (!touched) return;\n      for (const td of touched) {\n        td.classList.remove('selected');\n      }\n    };\n\n    const registerTouch = (e: TouchEvent) => {\n      const touch = e.touches[0];\n      const cell = document.elementFromPoint(touch.clientX, touch.clientY);\n      if (cell && cell.matches('.target')) {\n        const td = cell.parentNode as HTMLTableCellElement;\n        td.classList.add('selected');\n        if (!touched.has(td)) {\n          touched.add(td);\n          this.word.textContent += td.textContent!;\n        }\n      }\n    };\n\n    table.addEventListener('touchstart', e => {\n      this.clear();\n      deselect();\n      touched = new Set();\n\n      registerTouch(e);\n    });\n    table.addEventListener('touchend', () => {\n      deselect();\n      this.play();\n    });\n    table.addEventListener('touchmove', registerTouch);\n\n    content.appendChild(table);\n    return content;\n  }\n\n  afterAttach() {\n    UI.permaFocus(this.word);\n  }\n\n  detach(next: string) {\n    if (next !== 'Score' && next !== 'Define') this.timer.pause();\n    return this.container;\n  }\n\n  async refresh(data: { allowDupes?: boolean } = {}) {\n    UI.persist();\n    await UI.detachView('Board', 'Board');\n    await UI.attachView('Board', data);\n  }\n\n  play() {\n    const game = this.game as Game;\n    let w = (this.word.textContent || '').toUpperCase();\n    if (w.length < 3 || SUFFIXES.includes(w)) {\n      w = `${this.last}${w}`;\n      this.word.textContent = w;\n    }\n    const score = game.play(w);\n    this.last = w;\n    UI.persist();\n\n    const hide = game.settings.display === 'Hide';\n    this.kept = true;\n    if (!hide && score) {\n      this.displayScore();\n      this.defn.textContent = define(w, global.DICT);\n    } else {\n      const original = this.word.textContent || undefined;\n      if (!hide && game.played[w] < 0) this.word.classList.add('error');\n      this.word.classList.add('fade');\n      const listener = () => {\n        this.clear(original);\n        this.word.removeEventListener('animationend', listener);\n      };\n      this.word.addEventListener('animationend', listener);\n    }\n  }\n\n  displayScore() {\n    const game = this.game as Game;\n    if (game.settings.display === 'Hide') {\n      this.score.textContent = '?';\n      return;\n    }\n\n    if (game.settings.display === 'Full') {\n      const state = game.state();\n      const p = state.progress;\n      const details = `(${p.score}) ${Object.keys(p.suffixes).length}/${p.subwords}/${p.anagrams}`;\n      const score = game.score.regular + game.score.overtime;\n      const goal = state.totals[global.SETTINGS.grade.toLowerCase() as 'a' | 'b' | 'c' | 'd'];\n      const pct = Math.round((score / goal) * 100).toFixed(0);\n      this.full.textContent = `${details} - ${score}/${goal} (${pct}%)`;\n    }\n\n    const s = game.score;\n    this.score.textContent = s.overtime ? `${s.regular} / ${s.overtime}` : `${s.regular}`;\n  }\n\n  clear(w?: string) {\n    if (w && w !== this.word.textContent) return;\n    this.word.textContent = '';\n    this.word.classList.remove('error');\n    this.word.classList.remove('fade');\n    this.defn.textContent = '';\n    this.kept = false;\n  }\n\n  createTimer(duration = DURATION, elapsed = 0) {\n    const display = UI.createElementWithId('div', 'timer');\n    display.addEventListener('click', () => this.timer.pause());\n    const expire = () => {\n      if (this.game && !this.game.expired) {\n        this.game.expired = +new Date();\n      }\n    };\n    const timer = new Timer(display, duration, elapsed, expire, () => UI.persist());\n    return { display, timer };\n  }\n\n  updateGames() {\n    if (!global.GAMES) return;\n\n    const game = this.game as Game;\n    const played = new Set<string>();\n    for (const w in game.played) {\n      if (game.played[w] > 0) played.add(w);\n    }\n    if (!played.size) return;\n\n    if (global.GAMES.length >= global.LIMIT) global.GAMES.shift();\n    global.GAMES.push([game.possible, played]);\n  }\n\n  onLongPress() {\n    const game = this.game as Game;\n    const size = game.size;\n    const weights = [];\n    for (let row = 0; row < size; row++) {\n      const a = [];\n      for (let col = 0; col < size; col++) {\n        a.push(0);\n      }\n      weights.push(a);\n    }\n    let total = 0;\n    for (const word in game.possible) {\n      if (game.played[word]) continue;\n      const score = Game.score(word);\n      total += score;\n      for (const p of game.possible[word]) {\n        weights[p[1]][p[0]] += score;\n      }\n    }\n\n    for (const td of this.tds) {\n      const w = weights[Number(td.dataset.x)][Number(td.dataset.y)] / total;\n      td.style.backgroundColor = `rgba(255,0,0,${w})`;\n    }\n  }\n\n  onLongPressUp() {\n    for (const td of this.tds) {\n      td.style.removeProperty('background-color');\n    }\n  }\n\n  async onKeyDown(e: KeyboardEvent) {\n    if (this.kept) this.clear();\n    UI.focusContentEditable(this.word);\n    // tslint:disable-next-line: deprecation\n    const key = e.keyCode;\n    if (key === 13 || key === 32) {\n      e.preventDefault();\n      this.play();\n      UI.focusContentEditable(this.word);\n    } else if (key === 27) {\n      await UI.toggleView('Define');\n    } else if ((key < 65 || key > 90) && key !== 8) {\n      e.preventDefault();\n    }\n  }\n}\n","import { global } from './global';\nimport { UI, View } from './ui';\nimport { define } from '../dict';\n\nexport class DefineView implements View {\n  private word: string;\n\n  private define!: HTMLElement;\n  private search!: HTMLElement;\n\n  private defn: HTMLElement | null = null;\n  private stats: HTMLElement | null = null;\n  private anagrams: HTMLElement | null = null;\n\n  constructor(json?: { word: string }) {\n    this.word = json ? json.word : '';\n  }\n\n  toJSON(): { word: string } {\n    return { word: this.word };\n  }\n\n  async attach(word?: string) {\n    await Promise.all([global.LOADED.DICT, global.LOADED.STATS()]);\n\n    if (word) this.word = word;\n\n    this.define = UI.createElementWithId('div', 'define');\n    this.search = UI.createElementWithId('div', 'search');\n    this.search.classList.add('word');\n    this.search.contentEditable = 'true';\n    this.search.textContent = this.word;\n    this.define.appendChild(this.search);\n\n    this.define.addEventListener('input', () => this.query(this.search.textContent || ''));\n    this.update();\n\n    return this.define;\n  }\n\n  afterAttach() {\n    UI.permaFocus(this.search);\n  }\n\n  query(w: string) {\n    this.search.textContent = w;\n    this.word = w.toUpperCase();\n    this.update();\n    UI.persist();\n  }\n\n  detach() {\n    this.defn = null;\n    this.stats = null;\n    this.anagrams = null;\n    return this.define;\n  }\n\n  update() {\n    const val = global.DICT[this.word];\n    if (val) {\n      const defn = UI.createElementWithId('div', 'defineDefn');\n      defn.classList.add('definition');\n      defn.textContent = define(this.word, global.DICT);\n      const hard =\n        (val.dict && !val.dict.includes(global.SETTINGS.dict.charAt(0))) ||\n        this.word.length < global.SETTINGS.min;\n      if (hard) {\n        this.define.classList.add('hard');\n      } else {\n        this.define.classList.remove('hard');\n      }\n\n      const addCells = (tr: HTMLTableRowElement, label: string, data: string) => {\n        let td = document.createElement('td');\n        const b = document.createElement('b');\n        b.textContent = label;\n        td.appendChild(b);\n        tr.appendChild(td);\n\n        td = document.createElement('td');\n        td.classList.add('value');\n        td.textContent = data;\n        tr.appendChild(td);\n      };\n\n      const s = global.STATS.stats(this.word, global.SETTINGS.dice, global.SETTINGS.dict);\n\n      const stats = document.createElement('table');\n      stats.classList.add('roundedTable');\n\n      let tr = document.createElement('tr');\n      addCells(tr, 'Grade', s.grade === ' ' ? 'S' : s.grade);\n      addCells(tr, 'Score', s.word ? String(s.word.p) : '-');\n      stats.appendChild(tr);\n\n      tr = document.createElement('tr');\n      addCells(tr, 'Frequency', s.freq ? String(s.freq) : '-');\n      addCells(tr, 'Anagram', s.anagram ? String(s.anagram.p) : '-');\n      stats.appendChild(tr);\n\n      stats.appendChild(tr);\n\n      if (this.defn) this.define.removeChild(this.defn);\n      this.define.appendChild(defn);\n      this.defn = defn;\n\n      if (this.stats) this.define.removeChild(this.stats);\n      this.define.appendChild(stats);\n      this.stats = stats;\n    } else {\n      if (this.defn) {\n        this.define.removeChild(this.defn);\n        this.defn = null;\n      }\n      if (this.stats) {\n        this.define.removeChild(this.stats);\n        this.stats = null;\n      }\n    }\n\n    const anagrams = this.renderAnagrams();\n    if (this.anagrams) this.define.removeChild(this.anagrams);\n    this.define.appendChild(anagrams);\n    this.anagrams = anagrams;\n  }\n\n  renderAnagrams() {\n    const div = UI.createElementWithId('div', 'defineAnagrams');\n\n    const words = global.STATS.anagrams(this.word, global.SETTINGS.dict).words;\n    if (words.length <= 1) return div;\n\n    const solo = [];\n    const anadromes = new Set<string>();\n\n    for (const w of words) {\n      // prettier-ignore\n      const r = w.split('').reverse().join('');\n      if (r !== w && words.includes(r)) {\n        anadromes.add(`${[w, r].sort().join(' ')}`);\n      } else {\n        solo.push(w);\n      }\n    }\n\n    const format = (w: string) => {\n      const e = document.createElement(w === this.word ? 'b' : 'span');\n      e.textContent = w;\n      e.addEventListener('click', () => this.query(w));\n      return e;\n    };\n\n    for (const pair of anadromes) {\n      const [a, b] = pair.split(' ');\n      div.appendChild(document.createTextNode(' ('));\n      div.appendChild(format(a));\n      div.appendChild(document.createTextNode(' '));\n      div.appendChild(format(b));\n      div.appendChild(document.createTextNode(') '));\n    }\n\n    for (const w of solo) {\n      div.appendChild(format(w));\n      div.appendChild(document.createTextNode(' '));\n    }\n\n    return div;\n  }\n\n  async onKeyDown(e: KeyboardEvent) {\n    UI.focusContentEditable(this.search);\n    // tslint:disable-next-line: deprecation\n    const key = e.keyCode;\n    if (key === 13 || key === 32) {\n      if (this.word) {\n        this.query('');\n      } else {\n        await UI.toggleView('Define');\n      }\n    } else if (key === 27) {\n      await UI.toggleView('Define');\n    } else if ((key < 65 || key > 90) && key !== 8) {\n      e.preventDefault();\n    }\n  }\n}\n","import { UI, View } from './ui';\nimport { BoardView } from './board';\n\nexport class MenuView implements View {\n  menu!: HTMLElement;\n\n  toJSON() {}\n\n  attach() {\n    // NOTE: The id here would make more sense as '#menu', but uBlock's \"Web Annoyances Ultralist\" has:\n    // 'github.io###menu, .fixedHeaderContainer, .menu-btn:style(position: absolute !important;)'\n    this.menu = UI.createElementWithId('div', 'men');\n    const title = UI.createElementWithId('h1', 'title');\n    title.textContent = 'BOGGLE';\n    // TODO: needs testing!\n    title.addEventListener('long-press', async () => {\n      const key = (await caches.keys()).find(n => n.startsWith('cache'));\n      if (key) await caches.delete(key);\n      // tslint:disable-next-line: deprecation\n      document.location.reload(true);\n    });\n    this.menu.appendChild(title);\n    const nav = document.createElement('nav');\n\n    const createButton = (name: string, fn: () => void) => {\n      const button = document.createElement('button');\n      button.classList.add('toggle');\n      button.textContent = name;\n      button.addEventListener('click', fn);\n      return button;\n    };\n\n    if ((UI.Views.Board as BoardView).game) {\n      nav.appendChild(createButton('RESUME', () => UI.toggleView('Board', { resume: true })));\n      nav.appendChild(createButton('NEW GAME', () => UI.toggleView('Board')));\n    } else {\n      nav.appendChild(createButton('PLAY', () => UI.toggleView('Board')));\n    }\n    nav.appendChild(createButton('TRAIN', () => UI.toggleView('Training')));\n    nav.appendChild(createButton('DEFINE', () => UI.toggleView('Define')));\n    nav.appendChild(createButton('STATS', () => UI.toggleView('Stats')));\n    nav.appendChild(createButton('SETTINGS', () => UI.toggleView('Settings')));\n\n    this.menu.appendChild(nav);\n    return this.menu;\n  }\n\n  detach() {\n    return this.menu;\n  }\n}\n","import { global } from './global';\nimport { UI, View } from './ui';\nimport { order } from '../dict';\nimport { Store } from '../store';\nimport { TrainingStats } from '../training';\n\nexport class ReviewView implements View {\n  size: number;\n\n  review!: HTMLElement;\n\n  constructor(json?: { size: number }) {\n    this.size = json ? json.size : 0;\n  }\n\n  toJSON(): { size: number } {\n    return { size: this.size };\n  }\n\n  async attach(size?: number) {\n    await Promise.all([global.LOADED.DICT, global.LOADED.STATS()]);\n\n    this.review = UI.createElementWithId('div', 'review');\n    if (size) this.size = size;\n\n    const back = UI.createBackButton(() => UI.toggleView('Training'));\n    const progress = UI.createElementWithId('div', 'progress');\n    progress.textContent = String(this.size);\n    this.review.appendChild(UI.createTopbar(back, null, progress));\n\n    const d = global.SETTINGS.dice.charAt(0).toLowerCase() as 'n' | 'o' | 'b';\n    const score = (k: string) => global.STATS.anagrams(k, global.SETTINGS.dict)[d] || 0;\n\n    const store = new Store('training', global.SETTINGS.dict);\n    const data = (await store.get('data')) as TrainingStats[];\n    const keys = data\n      .filter(w => w.e < 2.0) // TODO: !v.c, figure out 2.0 based on average?\n      .sort((a, b) => score(b.k) / b.e - score(a.k) / a.e)\n      .map(w => w.k);\n\n    const wrapper = document.createElement('div');\n    wrapper.classList.add('wrapper');\n\n    for (const k of keys) {\n      const table = document.createElement('table');\n      table.classList.add('results');\n      UI.addAnagramRows(table, order(global.STATS.anagrams(k, global.SETTINGS.dict).words));\n      wrapper.appendChild(table);\n    }\n    this.review.appendChild(wrapper);\n\n    return this.review;\n  }\n\n  detach() {\n    return this.review;\n  }\n}\n","import { global } from './global';\nimport { UI, View } from './ui';\nimport { Game } from '../game';\nimport { Type } from '../dict';\nimport { Grade } from '../stats';\nimport { Settings, Dice, MinLength, ScoreDisplay, Theme } from '../settings';\n\nexport class SettingsView implements View {\n  settings!: HTMLElement;\n  seed!: HTMLElement;\n\n  toJSON() {}\n  attach() {\n    this.settings = UI.createElementWithId('div', 'settings');\n\n    this.seed = UI.createElementWithId('div', 'seed');\n    this.seed.textContent = Game.encodeID(global.SETTINGS, global.SEED);\n    this.seed.setAttribute('contenteditable', 'true');\n    this.seed.addEventListener('input', () => this.onInput(this.seed.textContent || ''));\n    const back = UI.createBackButton(() => UI.toggleView('Menu'));\n    this.settings.appendChild(UI.createTopbar(back, this.seed, null));\n\n    const checkedRadioRow = (\n      k: keyof Settings,\n      opts: string[],\n      fn: (this: HTMLInputElement) => void,\n      id?: string\n    ) => {\n      const row = document.createElement('div');\n      row.classList.add('row');\n      const radios = UI.createRadios(\n        id || k,\n        opts.map(s => (s === String(global.SETTINGS[k]) ? [s] : s)),\n        fn\n      );\n      row.appendChild(radios);\n      return row;\n    };\n\n    this.settings.appendChild(\n      checkedRadioRow('dice', ['New', 'Old', 'Big'], function(this: HTMLInputElement) {\n        const min = this.value === 'Big' ? 4 : 3;\n        (document.getElementById(`min${min}`) as HTMLInputElement).checked = true;\n        UI.updateSettings({ dice: this.value as Dice, min });\n      })\n    );\n    this.settings.appendChild(\n      checkedRadioRow('min', ['3', '4', '5'], function(this: HTMLInputElement) {\n        UI.updateSettings({ min: Number(this.value) as MinLength });\n      })\n    );\n    this.settings.appendChild(\n      checkedRadioRow('dict', ['NWL', 'ENABLE', 'CSW'], function(this: HTMLInputElement) {\n        UI.updateSettings({ dict: this.value as Type });\n      })\n    );\n    this.settings.appendChild(\n      checkedRadioRow('grade', ['A', 'B', 'C', 'D'], function(this: HTMLInputElement) {\n        UI.updateSettings({ grade: this.value as Exclude<Grade, ' '> });\n      })\n    );\n    this.settings.appendChild(\n      checkedRadioRow(\n        'display',\n        ['Hide', 'Show', 'Full'],\n        function(this: HTMLInputElement) {\n          UI.updateSettings({ display: this.value as ScoreDisplay });\n        },\n        'scoreDisplay'\n      )\n    );\n    this.settings.appendChild(\n      checkedRadioRow('theme', ['Light', 'Dark'], function(this: HTMLInputElement) {\n        const theme = this.value as Theme;\n        UI.updateSettings({ theme });\n        UI.setTheme(theme);\n      })\n    );\n\n    return this.settings;\n  }\n\n  detach() {\n    return this.settings;\n  }\n\n  update() {\n    this.seed.textContent = Game.encodeID(global.SETTINGS, global.SEED);\n    this.seed.classList.remove('error');\n    const set = (id: string) => ((document.getElementById(id) as HTMLInputElement).checked = true);\n    set(`dice${global.SETTINGS.dice}`);\n    set(`min${global.SETTINGS.min}`);\n    set(`dict${global.SETTINGS.dict}`);\n    set(`grade${global.SETTINGS.grade}`);\n    set(`scoreDisplay${global.SETTINGS.display}`);\n    set(`theme${global.SETTINGS.theme || 'Light'}`);\n  }\n\n  onInput(id: string) {\n    const [settings, seed] = Game.decodeID(id);\n    if (isNaN(seed) || !(settings.dice && settings.dict && settings.min)) {\n      this.seed.classList.add('error');\n    } else {\n      UI.updateSettings(settings, seed, false);\n      this.update();\n    }\n  }\n}\n","import { global } from './global';\nimport { UI, View } from './ui';\nimport { Game } from '../game';\nimport { Stats } from '../stats';\n\ntype Section = 'WORD' | 'ANAGRAM' | 'PAIR';\n\nexport class StatsView implements View {\n  section: Section;\n\n  stats!: HTMLElement;\n  table: HTMLElement | null = null;\n\n  constructor(json?: { section: Section }) {\n    this.section = json ? json.section : 'WORD';\n  }\n\n  toJSON(): { section: Section } {\n    return { section: this.section };\n  }\n\n  // TODO: why is there no spinner?\n  async attach() {\n    await Promise.all([\n      global.LOADED.HISTORY,\n      global.LOADED.TRIE(),\n      global.LOADED.DICT,\n      global.LOADED.STATS(),\n    ]);\n    if (!global.GAMES) {\n      global.GAMES = [];\n      for (let i = global.HISTORY.length - 1; i >= 0 && global.GAMES.length < global.LIMIT; i--) {\n        const game = Game.fromJSON(global.HISTORY[i], global.TRIE, global.DICT, global.STATS);\n        const played = new Set<string>();\n        for (const w in game.played) {\n          if (game.played[w] > 0) played.add(w);\n        }\n        global.GAMES.push([game.possible, played]);\n      }\n    }\n    // TODO: cache this, invalidate if GAMES/dice/dict/min changes?\n    const data = global.STATS.history(global.GAMES, global.SETTINGS.dice, global.SETTINGS.dict);\n\n    this.stats = UI.createElementWithId('div', 'stats');\n    const back = UI.createBackButton(() => UI.toggleView('Menu'));\n    const display = (s: Section) => this.display(s, data);\n    const radios = UI.createRadios(\n      'statsSelect',\n      ['WORD', 'ANAGRAM', 'PAIR'].map(s => (s === this.section ? [s] : s)),\n      function(this: HTMLInputElement) {\n        display(this.value as Section);\n        UI.persist();\n      }\n    );\n\n    this.stats.appendChild(UI.createTopbar(back, radios, null));\n    this.display(this.section, data);\n\n    return this.stats;\n  }\n\n  detach() {\n    this.table = null;\n    return this.stats;\n  }\n\n  display(section: Section, data: ReturnType<Stats['history']>) {\n    this.section = section;\n    const { words, anadromes, anagrams } = data;\n\n    const link = (w: string) => {\n      const b = document.createElement('b');\n      b.textContent = w;\n      b.addEventListener('click', () => UI.toggleView('Define', w));\n      return b;\n    };\n\n    const table = document.createElement('table');\n    table.classList.add('roundedTable');\n    if (section === 'PAIR') {\n      for (const { n, fn, d, fd, e } of anadromes) {\n        const tr = document.createElement('tr');\n\n        let td = document.createElement('td');\n        td.appendChild(link(n));\n        tr.appendChild(td);\n\n        td = document.createElement('td');\n        td.textContent = `${fn}/${fd} (${e})`;\n        tr.appendChild(td);\n\n        td = document.createElement('td');\n        td.appendChild(link(d));\n        tr.appendChild(td);\n\n        table.appendChild(tr);\n      }\n    } else if (section === 'WORD') {\n      for (const { w, found, all } of words) {\n        const tr = document.createElement('tr');\n\n        let td = document.createElement('td');\n        td.appendChild(link(w));\n        tr.appendChild(td);\n\n        td = document.createElement('td');\n        td.textContent = `${found}/${all}`;\n        tr.appendChild(td);\n\n        table.appendChild(tr);\n      }\n    } else {\n      for (const group of anagrams) {\n        const tr = document.createElement('tr');\n        const td = document.createElement('td');\n\n        let together = [];\n        let wait = false;\n        for (const { raw, found, all } of group) {\n          const w = raw.replace(/[^A-Z]/, '');\n\n          if (raw.startsWith('(')) {\n            const b = document.createElement('b');\n            b.textContent = '(';\n            together.push(b);\n            wait = true;\n          }\n\n          together.push(link(w));\n\n          const span = document.createElement('span');\n          span.textContent = ` ${found}/${all}`;\n\n          if (raw.endsWith(')')) {\n            together.push(span);\n            const b = document.createElement('b');\n            b.textContent = ')';\n            together.push(b);\n            wait = false;\n          } else {\n            if (wait) span.textContent += ' ';\n            together.push(span);\n          }\n\n          if (!wait) {\n            for (const e of together) td.appendChild(e);\n            td.appendChild(document.createElement('br'));\n            together = [];\n          }\n        }\n\n        tr.appendChild(td);\n        table.appendChild(tr);\n      }\n    }\n    if (this.table) this.stats.removeChild(this.table);\n    this.stats.appendChild(table);\n    this.table = table;\n  }\n}\n","import { Type, order } from './dict';\nimport { Stats } from './stats';\nimport { Store } from './store';\nimport { Dice } from './settings';\nimport { Random } from './random';\n\nconst PERIOD = 3;\nconst DAY = 24 * 60 * 60 * 1000;\n\ntype Comparator<T> = (a: T, b: T) => number;\n\nfunction defaultCompare<T>(a: T, b: T) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n\nclass Queue<T> {\n  length: number;\n  data: T[];\n  compare: Comparator<T>;\n\n  constructor(data: T[] = [], compare: Comparator<T> = defaultCompare) {\n    this.data = data;\n    this.length = this.data.length;\n    this.compare = compare;\n\n    if (this.length > 0) {\n      for (let i = (this.length >> 1) - 1; i >= 0; i--) this.down(i);\n    }\n  }\n\n  push(item: T) {\n    this.data.push(item);\n    this.length++;\n    this.up(this.length - 1);\n  }\n\n  pop(): T | undefined {\n    if (this.length === 0) return undefined;\n\n    const top = this.data[0]!;\n    const bottom = this.data.pop()!;\n    this.length--;\n\n    if (this.length > 0) {\n      this.data[0] = bottom;\n      this.down(0);\n    }\n\n    return top;\n  }\n\n  peek(): T | undefined {\n    return this.data[0];\n  }\n\n  private up(pos: number) {\n    const item = this.data[pos];\n\n    while (pos > 0) {\n      const parent = (pos - 1) >> 1;\n      const current = this.data[parent];\n      if (this.compare(item, current) >= 0) break;\n      this.data[pos] = current;\n      pos = parent;\n    }\n\n    this.data[pos] = item;\n  }\n\n  private down(pos: number) {\n    const half = this.length >> 1;\n    const item = this.data[pos];\n\n    while (pos < half) {\n      let left = (pos << 1) + 1;\n      let best = this.data[left];\n      const right = left + 1;\n\n      if (right < this.length && this.compare(this.data[right], best) < 0) {\n        left = right;\n        best = this.data[right];\n      }\n      if (this.compare(best, item) >= 0) break;\n\n      this.data[pos] = best;\n      pos = left;\n    }\n\n    this.data[pos] = item;\n  }\n}\n\nexport interface TrainingStats {\n  k: string; // key\n  e: number; // easiness\n  c: number; // correct\n  n: number; // encounters\n  d: number; // due date\n  p: number; // previous\n}\n\nexport class TrainingPool {\n  readonly type: Type;\n\n  private readonly d: 'n' | 'o' | 'b';\n  private readonly unlearned: string[];\n  private readonly learned: Queue<TrainingStats>;\n  private readonly store: Store;\n  private readonly stats: Stats;\n\n  static async create(stats: Stats, dice: Dice, type: Type, store: Store, min: number) {\n    const d = dice.toLowerCase()[0] as 'n' | 'o' | 'b';\n    // NOTE: learned is shared across dice...\n    const learned = new Queue<TrainingStats>([] /* filled in */, (a, b) => a.d - b.d);\n\n    const queued = new Set();\n    // TODO: store short separately and iterate over depending on min length\n    const stored: TrainingStats[] | undefined = await store.get('data');\n    if (stored) {\n      learned.data = stored;\n      learned.length = stored.length;\n      for (const s of stored) queued.add(s.k);\n    }\n\n    const raw = [];\n    for (const k in stats.mixed) {\n      if (!queued.has(k)) {\n        const w = stats.anagrams(k, type, min)[d] || 0;\n        if (w) raw.push({ k, w });\n      }\n    }\n    raw.sort((a, b) => a.w - b.w);\n    const unlearned = raw.map(e => e.k);\n\n    return new TrainingPool(unlearned, learned, d, type, store, stats);\n  }\n\n  private constructor(\n    unlearned: string[],\n    learned: Queue<TrainingStats>,\n    d: 'n' | 'o' | 'b',\n    type: Type,\n    store: Store,\n    stats: Stats\n  ) {\n    this.unlearned = unlearned;\n    this.learned = learned;\n    this.d = d;\n    this.type = type;\n    this.store = store;\n    this.stats = stats;\n  }\n\n  size() {\n    return this.learned.length;\n  }\n\n  next() {\n    const now = +new Date();\n    const backfill = () => {\n      if (!this.unlearned.length) return undefined;\n      return {\n        k: this.unlearned.pop()!,\n        e: 2.5,\n        c: 0,\n        n: 0,\n        d: 0,\n        p: 0,\n      };\n    };\n    // TODO: what about if settings change and group no longer valid (eg. min length)?\n    let next: TrainingStats | undefined = this.learned.pop();\n    if (next) {\n      if (next.d > now) {\n        const fill = backfill();\n        if (fill) {\n          this.learned.push(next);\n          next = fill;\n        }\n      }\n    } else {\n      next = backfill();\n    }\n    if (!next) throw new RangeError();\n\n    let key = next.k;\n    const anagrams = this.stats.anagrams(key, this.type);\n    const group = anagrams.words;\n\n    const restore = () => this.learned.push(next!);\n    const update = (q: number) => {\n      next = adjust(next!, q, now);\n      restore();\n      return this.store.set('data', this.learned.data);\n    };\n\n    const random = new Random(next.n);\n    // try to find a permutation which isn't in the group\n    for (let i = 0; i < 10; i++) {\n      key = random.shuffle(key.split('')).join('');\n      if (!group.includes(key)) break;\n    }\n\n    return { label: key, group: order(group), update, restore };\n  }\n}\n\nfunction adjust(v: TrainingStats, q: number, now: number) {\n  // Standard update from SM2: https://www.supermemo.com/en/archives1990-2015/english/ol/sm2\n  let mod = -0.8 + 0.28 * q - 0.02 * q * q;\n  // During the initial learning phase (n < 5), only apply a fraction of the modifier if negative\n  // https://apps.ankiweb.net/docs/manual.html#what-spaced-repetition-algorithm-does-anki-use\n  if (mod < 0) mod *= Math.min(Math.pow(2, v.n + 1) * 2.5, 100) / 100;\n  // SM2 uses a minimum easiness of 1.3\n  const min = 1.3;\n\n  if (q >= 3) {\n    // http://www.blueraja.com/blog/477/a-better-spaced-repetition-learning-algorithm-sm2\n    const bonus = v.d ? Math.min(2, (v.d - v.p) / DAY / (v.c ? PERIOD : 1)) : 1;\n    v.c++;\n    v.e = Math.max(min, v.e + mod * bonus);\n    v.d = now + DAY * PERIOD * Math.pow(v.e, v.c - 1) * bonus;\n  } else {\n    v.c = 0;\n    v.e = Math.max(min, v.e + mod);\n    v.d = now + DAY;\n  }\n  v.n++;\n  v.p = now;\n\n  return v;\n}\n","import { global } from './global';\nimport { UI, View } from './ui';\nimport { TrainingPool } from '../training';\nimport { Store } from '../store';\n\nexport class TrainingView implements View {\n  pool!: TrainingPool;\n  train!: HTMLElement;\n  content: HTMLElement | null = null;\n  restore: (() => void) | null = null;\n\n  toJSON() {}\n  async attach() {\n    await Promise.all([global.LOADED.TRAINING, global.LOADED.DICT, global.LOADED.STATS()]);\n    if (!this.pool || this.pool.type !== global.SETTINGS.dict) {\n      const store = new Store('training', global.SETTINGS.dict);\n      this.pool = await TrainingPool.create(\n        global.STATS,\n        global.SETTINGS.dice,\n        global.SETTINGS.dict,\n        store,\n        global.SETTINGS.min\n      );\n    }\n\n    this.train = UI.createElementWithId('div', 'train');\n    this.next();\n    return this.train;\n  }\n\n  async detach() {\n    if (this.restore) await this.restore();\n    this.content = null;\n    return this.train;\n  }\n\n  next() {\n    const content = UI.createElementWithId('div', 'content');\n    const progress = UI.createElementWithId('div', 'progress');\n    progress.textContent = String(this.pool.size());\n\n    const { label, group, update, restore } = this.pool.next();\n    this.restore = restore;\n    const trainWord = document.createElement('div');\n    trainWord.classList.add('word');\n    trainWord.textContent = label;\n\n    const sizeHint = UI.createElementWithId('div', 'sizeHint');\n    sizeHint.classList.add('hidden');\n    sizeHint.textContent = String(group.length);\n\n    const rating = this.createRatingToggles(update);\n    const table = document.createElement('table');\n    table.classList.add('results', 'hidden');\n    UI.addAnagramRows(table, group);\n\n    progress.addEventListener('mouseup', () => UI.toggleView('Review', progress.textContent));\n    progress.addEventListener('long-press', () => {\n      if (!rating.classList.contains('hidden')) return;\n      sizeHint.classList.remove('hidden');\n    });\n    progress.addEventListener('long-press-up', () => sizeHint.classList.add('hidden'));\n\n    const back = UI.createBackButton(() => UI.toggleView('Menu'));\n    content.appendChild(UI.createTopbar(back, null, progress));\n\n    const wrapper = document.createElement('div');\n    wrapper.classList.add('wrapper');\n    wrapper.appendChild(trainWord);\n    wrapper.appendChild(table);\n\n    content.appendChild(wrapper);\n    content.appendChild(sizeHint);\n    content.appendChild(rating);\n\n    const listener = (e: MouseEvent) => {\n      if (![back, progress].includes(e.target as HTMLElement)) {\n        content.removeEventListener('click', listener);\n        trainWord.classList.add('hidden');\n        table.classList.remove('hidden');\n        rating.classList.remove('hidden');\n      }\n    };\n    content.addEventListener('click', listener);\n\n    if (this.content) this.train.removeChild(this.content);\n    this.train.appendChild(content);\n    this.content = content;\n  }\n\n  createRatingToggles(update: (q: number) => Promise<void>) {\n    const toggles = document.createElement('div');\n    toggles.setAttribute('id', 'rating');\n    toggles.classList.add('toggle-group');\n    toggles.classList.add('horizontal');\n    toggles.classList.add('hidden');\n\n    for (let i = 0; i < 6; i++) {\n      const toggle = document.createElement('button');\n      toggle.setAttribute('id', `rating${i}`);\n      toggle.setAttribute('type', 'button');\n      toggle.classList.add('toggle');\n      toggle.textContent = String(i);\n\n      toggles.appendChild(toggle);\n\n      toggle.addEventListener('click', async () => {\n        await update(Number(toggle.textContent));\n        this.restore = null;\n        this.next();\n      });\n    }\n\n    return toggles;\n  }\n}\n","import { global } from './global';\nimport { Game, GameSettings, GameJSON } from '../game';\nimport { Random } from '../random';\nimport { Settings, Theme } from '../settings';\nimport { define } from '../dict';\n\nimport { BoardView } from './board';\nimport { DefineView } from './define';\nimport { MenuView } from './menu';\nimport { ReviewView } from './review';\nimport { SettingsView } from './settings';\nimport { StatsView } from './stats';\nimport { TrainingView } from './training';\n\nclass Loader {\n  private loader!: HTMLElement;\n\n  attach() {\n    this.loader = UI.createElementWithId('div', 'loader');\n    const spinner = UI.createElementWithId('div', 'spinner');\n    this.loader.appendChild(spinner);\n    return this.loader;\n  }\n\n  detach() {\n    return this.loader;\n  }\n}\n\nexport interface View {\n  toJSON(): any;\n  attach(data?: any): HTMLElement | Promise<HTMLElement>;\n  detach(next: string): HTMLElement | Promise<HTMLElement>;\n  afterAttach?: () => void;\n  onKeyDown?: (e: KeyboardEvent) => Promise<void>;\n}\n\nexport const UI = new (class {\n  root!: HTMLElement;\n  BACK!: HTMLImageElement;\n  current!: string;\n  previous!: string;\n  Views!: { [view: string]: View };\n  loader!: Loader;\n\n  async create() {\n    setTimeout(() => window.scrollTo(0, 1), 0);\n\n    // If theme has been explicitly set by the user then that trumps the system value\n    if (global.SETTINGS.theme !== undefined) {\n      this.setTheme(global.SETTINGS.theme);\n    } else {\n      this.setTheme(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'Dark' : 'Light');\n    }\n\n    this.root = document.getElementById('display')!;\n\n    const state = JSON.parse(localStorage.getItem('state')!);\n    this.current = state ? state.current : 'Menu';\n    this.previous = state ? state.previous : 'Menu';\n    this.loader = new Loader();\n    const VIEWS = {\n      Menu: MenuView,\n      Board: BoardView,\n      Training: TrainingView,\n      Review: ReviewView,\n      Define: DefineView,\n      Stats: StatsView,\n      Settings: SettingsView,\n    };\n    const views = state ? state.views : {};\n    this.Views = {};\n    for (const [type, view] of Object.entries(VIEWS)) {\n      // @ts-ignore\n      this.Views[type] = new view(views[type]);\n    }\n\n    await this.setup();\n\n    this.BACK = document.createElement('img');\n    this.BACK.src = (document.getElementById('svg') as HTMLImageElement).src;\n    this.BACK.height = 20;\n\n    document.addEventListener('keydown', e => this.onKeyDown(e));\n    document.addEventListener('swiped-left', () => this.toggleView('Define'));\n    document.addEventListener('swiped-right', () => this.toggleView('Define'));\n    window.addEventListener('hashchange', () => this.onHashChange());\n    window.addEventListener('beforeunload', () => this.persist());\n\n    await this.attachView(this.current);\n  }\n\n  persist(previous = false) {\n    const state = JSON.parse(localStorage.getItem('state')!) || {};\n    state.current = this.current;\n    state.previous = this.previous;\n    state.views = state.views || {};\n    state.views[this.current] = this.Views[this.current];\n    if (previous) state.views[this.previous] = this.Views[this.previous];\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  async attachView(view: string, data?: any) {\n    // console.log(+new Date(), 'ATTACHING', view, data, this.Views[view]);\n    this.root.appendChild(this.loader.attach());\n    const v = this.Views[view];\n    const attached = await v.attach(data);\n    this.root.removeChild(this.loader.detach());\n    this.root.appendChild(attached);\n    if (v.afterAttach) v.afterAttach();\n    // console.log(+new Date(), 'ATTACHED', view, data, this.Views[view]);\n  }\n\n  async detachView(view: string, next: string) {\n    // console.log(+new Date(), 'DETACHING', view, this.Views[view]);\n    this.root.removeChild(await this.Views[view].detach(next));\n    // console.log(+new Date(), 'DETACHED', view, this.Views[view]);\n  }\n\n  async toggleView(view: string, data?: any) {\n    // console.log('TOGGLE', view, {current: this.current, previous: this.previous});\n    if (this.current === view) {\n      await this.detachView(view, this.previous);\n      this.current = this.previous;\n      this.previous = view;\n      await this.attachView(this.current, data);\n    } else {\n      await this.detachView(this.current, view);\n      this.previous = this.current;\n      this.current = view;\n      await this.attachView(view, data);\n    }\n    this.persist(true);\n  }\n\n  async setup() {\n    const setupFromHistory = async () => {\n      await global.LOADED.HISTORY;\n      if (global.HISTORY.length) {\n        const id = global.HISTORY[global.HISTORY.length - 1].seed;\n        const [settings] = Game.decodeID(id);\n\n        const rand = new Random();\n        rand.seed = global.SEED;\n        rand.next();\n\n        this.updateSettings(settings, rand.seed);\n      }\n    };\n\n    const hash = document.location.hash && document.location.hash.slice(1);\n    if (!hash) {\n      const existing = (this.Views.Board as BoardView).game;\n      if (existing) {\n        const [settings, seed] = Game.decodeID((existing as GameJSON).seed);\n        this.updateSettings(settings, seed);\n      } else {\n        return setupFromHistory();\n      }\n    } else {\n      const [settings, seed] = Game.decodeID(hash);\n      if (!this.valid(settings, seed)) {\n        return setupFromHistory();\n      }\n      this.updateSettings(settings, seed);\n    }\n  }\n\n  async onKeyDown(e: KeyboardEvent) {\n    // tslint:disable-next-line: deprecation\n    const key = e.keyCode;\n    const currentView = this.Views[this.current];\n    if (key === 191 && e.shiftKey) {\n      e.preventDefault();\n      await this.toggleView('Define');\n    } else if ('onKeyDown' in currentView) {\n      await currentView.onKeyDown!(e);\n    }\n  }\n\n  async onHashChange() {\n    if (!document.location.hash) return;\n    const [settings, seed] = Game.decodeID(document.location.hash.slice(1));\n    if (!this.valid(settings, seed)) return;\n\n    let refresh = seed !== global.SEED;\n    if (!refresh) {\n      const s = Object.assign({}, global.SETTINGS);\n      refresh = s.dice !== settings.dice || s.min !== settings.min || s.dict !== settings.dict;\n    }\n    this.updateSettings(settings, seed, false);\n\n    if (this.current === 'Settings') {\n      (this.Views[this.current] as SettingsView).update();\n    } else if (refresh && this.current === 'Play') {\n      return (this.Views[this.current] as BoardView).refresh({ allowDupes: true });\n    }\n  }\n\n  valid(settings: Partial<GameSettings>, seed: number) {\n    return !isNaN(seed) && !(settings.dice && settings.dict && settings.min);\n  }\n\n  updateSettings(settings: Partial<Settings>, seed?: number, dom = true) {\n    Object.assign(global.SETTINGS, settings);\n    localStorage.setItem('settings', JSON.stringify(global.SETTINGS));\n    if (seed) global.SEED = seed;\n\n    const id = Game.encodeID(global.SETTINGS, global.SEED);\n    window.history.replaceState(null, '', `#${id}`);\n\n    if (dom && this.current === 'Settings') {\n      const view = this.Views[this.current] as SettingsView;\n      view.seed.textContent = id;\n      view.seed.classList.remove('error');\n    }\n  }\n\n  createElementWithId(type: string, id: string) {\n    const element = document.createElement(type);\n    element.setAttribute('id', id);\n    return element;\n  }\n\n  createTopbar(left: HTMLElement | null, center: HTMLElement | null, right: HTMLElement | null) {\n    const topbar = this.createElementWithId('header', 'topbar');\n    topbar.appendChild(left || document.createElement('div'));\n    topbar.appendChild(center || document.createElement('div'));\n    topbar.appendChild(right || document.createElement('div'));\n    return topbar;\n  }\n\n  createBackButton(fn: (e: MouseEvent) => void) {\n    const back = this.createElementWithId('div', 'back');\n    back.appendChild(this.BACK);\n    back.addEventListener('mouseup', fn);\n    return back;\n  }\n\n  focusContentEditable(element: HTMLElement) {\n    element.focus();\n    document.execCommand('selectAll', false);\n    const sel = document.getSelection();\n    if (sel && !sel.isCollapsed) sel.collapseToEnd();\n  }\n\n  permaFocus(element: HTMLElement) {\n    element.addEventListener('blur', () =>\n      setTimeout(() => this.focusContentEditable(element), 20)\n    );\n    this.focusContentEditable(element);\n  }\n\n  setTheme(theme: Theme) {\n    document.documentElement.setAttribute('data-theme', theme.toLowerCase());\n  }\n\n  addAnagramRows(table: HTMLTableElement, group: string[]) {\n    for (const r of group) {\n      const w = r.replace(/[^A-Z]/, '');\n      const tr = document.createElement('tr');\n      const grade = global.STATS.stats(w, global.SETTINGS.dice, global.SETTINGS.dict).grade;\n      if (grade < global.SETTINGS.grade) tr.classList.add('hard');\n\n      let td = document.createElement('td');\n      const b = document.createElement('b');\n      const s = r.startsWith('(') ? `${r}\\xa0` : r.endsWith(')') ? `\\xa0${r}` : `\\xa0${r}\\xa0`;\n      b.textContent = `\\xa0${s}\\xa0`;\n      td.appendChild(b);\n      tr.appendChild(td);\n      td = document.createElement('td');\n      td.textContent = define(w, global.DICT);\n      tr.appendChild(td);\n\n      table.appendChild(tr);\n    }\n  }\n\n  createRadios(id: string, values: Array<string | [string]>, listener: () => void) {\n    const radios = this.createElementWithId('span', id);\n    radios.classList.add('toggle-group');\n    radios.classList.add('horizontal');\n    radios.setAttribute('role', 'radiogroup');\n    for (let val of values) {\n      let checked = false;\n      if (Array.isArray(val)) {\n        checked = true;\n        val = val[0];\n      }\n\n      const radio = this.createElementWithId('input', `${id}${val}`);\n      radio.classList.add('hide');\n      radio.setAttribute('type', 'radio');\n      radio.setAttribute('name', id);\n      radio.setAttribute('value', val);\n      if (checked) radio.setAttribute('checked', 'checked');\n\n      const label = document.createElement('label');\n      label.classList.add('toggle');\n      label.setAttribute('for', `${id}${val}`);\n      label.textContent = val.toUpperCase();\n\n      radio.addEventListener('click', listener.bind(radio));\n\n      radios.appendChild(radio);\n      radios.appendChild(label);\n    }\n    return radios;\n  }\n})();\n","// https://github.com/parcel-bundler/parcel/issues/1762\nimport 'regenerator-runtime/runtime';\nimport { UI } from './ui/ui';\n// tslint:disable-next-line:no-floating-promises\nUI.create();\n"]}